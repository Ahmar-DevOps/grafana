import React from 'react';
import { SelectableValue } from '@grafana/data';
import { FormInputSize } from '../types';
declare type SelectValue<T> = T | SelectableValue<T> | T[] | Array<SelectableValue<T>>;
export interface SelectCommonProps<T> {
    className?: string;
    options?: Array<SelectableValue<T>>;
    defaultValue?: any;
    inputValue?: string;
    value?: SelectValue<T>;
    getOptionLabel?: (item: SelectableValue<T>) => string;
    getOptionValue?: (item: SelectableValue<T>) => string;
    onChange: (value: SelectableValue<T>) => {} | void;
    onInputChange?: (label: string) => void;
    onKeyDown?: (event: React.KeyboardEvent) => void;
    placeholder?: string;
    disabled?: boolean;
    isSearchable?: boolean;
    isClearable?: boolean;
    autoFocus?: boolean;
    openMenuOnFocus?: boolean;
    onBlur?: () => void;
    maxMenuHeight?: number;
    isLoading?: boolean;
    noOptionsMessage?: string;
    isMulti?: boolean;
    backspaceRemovesValue?: boolean;
    isOpen?: boolean;
    components?: any;
    onOpenMenu?: () => void;
    onCloseMenu?: () => void;
    tabSelectsValue?: boolean;
    formatCreateLabel?: (input: string) => string;
    allowCustomValue?: boolean;
    width?: number;
    size?: FormInputSize;
    /** item to be rendered in front of the input */
    prefix?: JSX.Element | string | null;
    renderControl?: ControlComponent<T>;
}
export interface SelectAsyncProps<T> {
    /** When specified as boolean the loadOptions will execute when component is mounted */
    defaultOptions?: boolean | Array<SelectableValue<T>>;
    /** Asynchroniously load select options */
    loadOptions?: (query: string) => Promise<Array<SelectableValue<T>>>;
    /** Message to display when options are loading */
    loadingMessage?: string;
}
export interface MultiSelectCommonProps<T> extends Omit<SelectCommonProps<T>, 'onChange' | 'isMulti' | 'value'> {
    value?: Array<SelectableValue<T>> | T[];
    onChange: (item: Array<SelectableValue<T>>) => {} | void;
}
export interface SelectBaseProps<T> extends SelectCommonProps<T>, SelectAsyncProps<T> {
    invalid?: boolean;
}
export interface CustomControlProps<T> {
    ref: React.Ref<any>;
    isOpen: boolean;
    /** Currently selected value */
    value?: SelectableValue<T>;
    /** onClick will be automatically passed to custom control allowing menu toggle */
    onClick: () => void;
    /** onBlur will be automatically passed to custom control closing the menu on element blur */
    onBlur: () => void;
    disabled: boolean;
    invalid: boolean;
}
export declare type ControlComponent<T> = React.ComponentType<CustomControlProps<T>>;
export declare function SelectBase<T>({ value, defaultValue, inputValue, onInputChange, options, onChange, onBlur, onKeyDown, onCloseMenu, onOpenMenu, placeholder, getOptionValue, getOptionLabel, isSearchable, disabled, isClearable, isMulti, isLoading, isOpen, autoFocus, openMenuOnFocus, maxMenuHeight, noOptionsMessage, tabSelectsValue, backspaceRemovesValue, allowCustomValue, size, prefix, formatCreateLabel, loadOptions, loadingMessage, defaultOptions, renderControl, width, invalid, components, }: SelectBaseProps<T>): JSX.Element;
export {};
